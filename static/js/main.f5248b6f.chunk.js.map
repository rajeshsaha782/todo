{"version":3,"sources":["components/Form.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","inputTextHandler","e","inputText","target","value","setState","submitHandler","preventDefault","onAdd","state","this","onChange","onKeyPress","event","key","type","className","onClick","name","onFilterChange","Component","TodoList","todoList","filter","x","completed","map","todo","id","text","onCompletedTodo","onDeleteTodo","App","addTodo","todoText","console","log","Math","random","setTodoList","index","indexOf","splice","prevTodoList","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5248b6f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputText: \"\",\r\n    };\r\n  }\r\n  inputTextHandler = (e) => {\r\n    let inputText = e.target.value;\r\n    this.setState({ inputText });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    // console.log(this.state.inputText);\r\n    this.props.onAdd(this.state.inputText);\r\n    this.setState({ inputText: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <input\r\n          value={this.state.inputText}\r\n          onChange={this.inputTextHandler}\r\n          onKeyPress={(event) => {\r\n            if (event.key === \"Enter\") {\r\n              this.submitHandler(event);\r\n            }\r\n          }}\r\n          type=\"text\"\r\n          className=\"todo-input\"\r\n        />\r\n        <button onClick={this.submitHandler} className=\"todo-button\">\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <div className=\"select\">\r\n          <select\r\n            name=\"todos\"\r\n            className=\"filter-todo\"\r\n            onChange={this.props.onFilterChange}\r\n          >\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    let { todoList } = this.props;\r\n    switch (this.props.filter) {\r\n      case \"completed\":\r\n        todoList = todoList.filter((x) => x.completed === true);\r\n        break;\r\n      case \"uncompleted\":\r\n        todoList = todoList.filter((x) => x.completed !== true);\r\n        break;\r\n      default:\r\n    }\r\n    return (\r\n      <div className=\"todo-container\">\r\n        <ul className=\"todo-list\">\r\n          {todoList.map((todo) => (\r\n            <div className=\"todo\" key={todo.id}>\r\n              <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n                {todo.text}\r\n              </li>\r\n              <button\r\n                onClick={() => this.props.onCompletedTodo(todo)}\r\n                className=\"complete-btn\"\r\n              >\r\n                <i className=\"fas fa-check\"></i>\r\n              </button>\r\n              <button\r\n                onClick={() => this.props.onDeleteTodo(todo)}\r\n                className=\"trash-btn\"\r\n              >\r\n                <i className=\"fas fa-trash\"></i>\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      filter: \"all\",\n    };\n  }\n  componentDidMount() {\n    let prevTodoList = localStorage.getItem(\"todoList\");\n    if (prevTodoList) {\n      let todoList = JSON.parse(prevTodoList);\n      this.setState({ todoList });\n    }\n  }\n  setTodoList(todoList) {\n    this.setState(\n      {\n        todoList,\n      },\n      () => {\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.todoList));\n      }\n    );\n  }\n  addTodo = (todoText) => {\n    console.log(\"text: \", todoText);\n    let todo = {\n      id: Math.random() * 100,\n      text: todoText,\n      completed: false,\n    };\n    let todoList = [...this.state.todoList, todo];\n    this.setTodoList(todoList);\n  };\n  onCompletedTodo = (todo) => {\n    const { todoList } = this.state;\n    let index = todoList.indexOf(todo);\n    todo.completed = !todo.completed;\n    todoList[index] = todo;\n    this.setTodoList(todoList);\n  };\n  onDeleteTodo = (todo) => {\n    const { todoList } = this.state;\n    let index = todoList.indexOf(todo);\n    todoList.splice(index, 1);\n    this.setTodoList(todoList);\n  };\n  onFilterChange = (event) => {\n    this.setState({ filter: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>My Todo List</h1>\n        </header>\n        <Form onAdd={this.addTodo} onFilterChange={this.onFilterChange} />\n        <TodoList\n          todoList={this.state.todoList}\n          filter={this.state.filter}\n          onCompletedTodo={this.onCompletedTodo}\n          onDeleteTodo={this.onDeleteTodo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}